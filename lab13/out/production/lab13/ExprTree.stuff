public static BinaryTree exprTree (String s) {
    BinaryTree result = new BinaryTree();
    result.myRoot = result.exprTreeHelper (s);
    return result;
}

// Return the tree corresponding to the given arithmetic expression.
// The expression is legal, fully parenthesized, contains no blanks, 
// and involves only the operations + and *.
private TreeNode exprTreeHelper (String expr) {
    if (expr.charAt (0) != '(') {
        // YOUR CODE HERE
    } else {
        // expr is a parenthesized expression.
        // Strip off the beginning and ending parentheses,
        // find the main operator (an occurrence of + or * not nested
        // in parentheses, and construct the two subtrees.
        int nesting = 0;
        int opPos = 0;
        for (int k = 1; k < expr.length() - 1; k++) {
            // YOUR CODE HERE
        }
        String opnd1 = expr.substring (1, opPos);
        String opnd2 = expr.substring (opPos+1, expr.length()-1);
        String op = expr.substring (opPos, opPos+1);
        System.out.println ("expression = " + expr);
        System.out.println ("operand 1 = " + opnd1);
        System.out.println ("operator = " + op);
        System.out.println ("operand 2 = " + opnd2);
        System.out.println ( );
        // YOUR CODE HERE
    }
}
